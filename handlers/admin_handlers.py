import logging
import sqlite3  # –î–æ–±–∞–≤—å—Ç–µ –∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ SQLite3

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State
from aiogram.dispatcher.filters.state import StatesGroup

from database.database import read_channels_from_database, DATABASE_FILE
from system.dispatcher import dp, bot


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
class SomeState(StatesGroup):
    AddingChannel = State()
    RemovingChannel = State()


@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    help_text = ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üòä\n"
                 "–ö–æ–º–∞–Ω–¥—ã:\n\n"
                 "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞üìù\n"
                 "/add_group_id ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Öüî¨\n"
                 "/remove_group_id ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Öüî®\n")
    await message.reply(help_text)


async def is_user_subscribed(user_id):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤"""
    CHANNEL_USERNAMES = read_channels_from_database(DATABASE_FILE)
    try:
        for channel_username in CHANNEL_USERNAMES:
            user = await bot.get_chat_member(chat_id=channel_username, user_id=user_id)
            if user.status not in ('member', 'administrator', 'creator'):
                return False
        return True
    except Exception as e:
        logging.error(f"Error checking subscription: {e}")
        return False


@dp.message_handler(commands=['add_group_id'])
async def cmd_add_group_id(message: types.Message):
    user_id = message.from_user.id
    if message.chat.type == types.ChatType.PRIVATE:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:")
        await SomeState.AddingChannel.set()
    else:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (DM).")


@dp.message_handler(state=SomeState.AddingChannel)
async def process_channel_username(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['channel_username'] = message.text
        try:
            # –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–∏—Ç—å username –∫–∞–Ω–∞–ª–∞
            conn = sqlite3.connect(DATABASE_FILE)
            cursor = conn.cursor()
            cursor.execute("CREATE TABLE IF NOT EXISTS channels (channel_username)")
            cursor.execute("INSERT INTO channels (channel_username) VALUES (?)", (data['channel_username'],))
            conn.commit()
            conn.close()
            await message.reply(f"–ö–∞–Ω–∞–ª {data['channel_username']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        except Exception as e:
            logging.error(f"Error adding channel to database: {e}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.finish()


async def remove_channel_from_database(channel_username):
    try:
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM channels WHERE channel_username = ?", (channel_username,))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logging.error(f"Error removing channel from database: {e}")
        return False


@dp.message_handler(commands=['remove_group_id'])
async def cmd_remove_group_id(message: types.Message):
    user_id = message.from_user.id
    if message.chat.type == types.ChatType.PRIVATE:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        await SomeState.RemovingChannel.set()
    else:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (DM).")


@dp.message_handler(state=SomeState.RemovingChannel)
async def process_remove_channel_username(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        channel_username = message.text
        if await remove_channel_from_database(channel_username):
            await message.reply(f"–ö–∞–Ω–∞–ª {channel_username} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.finish()


def register_admin_handler():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.register_message_handler(cmd_help)
    dp.register_message_handler(cmd_add_group_id)
    dp.register_message_handler(cmd_remove_group_id)