import aiogram.utils.exceptions
from aiogram import types
from aiogram.types import CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.input_media import InputMediaPhoto
from aiogram.utils.callback_data import CallbackData

from database.database import get_random_id_movies, get_movie_info, get_random_movie_by_genre_and_year
# from database.movie_api_requests import get_random_movie_genres, process_movie_data
from keyboards.inline.adv_search_again import create_genre_selection_keyboard, create_year_selection_keyboard
from system.dispatcher import dp, bot

user_selections = {}  # Create a dictionary to store user selections

pag_cb_1 = CallbackData("empty", "action", "page")


@dp.message_handler(lambda message: message.text == "üé≤ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä–∞–º")
async def random_movie_command_genres_1(message: types.Message):
    genres_markup = create_genre_selection_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞ —Ñ–∏–ª—å–º–∞
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞:", reply_markup=genres_markup)


genre_callback = CallbackData("genre", "genre")


@dp.callback_query_handler(genre_callback.filter())
async def process_genre_callback_genres(query: CallbackQuery, callback_data: dict):
    chat_id = query.message.chat.id
    genre = callback_data["genre"]
    user_selections[chat_id] = {"genre": genre}
    year_markup = create_year_selection_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ª–µ—Ç
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç:", reply_markup=year_markup)


year_callback = CallbackData("year", "year")

items_1 = {}


@dp.callback_query_handler(year_callback.filter())
async def process_year_callback_1(query: CallbackQuery, callback_data: dict):
    chat_id = query.message.chat.id
    year_range = callback_data["year"]
    genre = user_selections.get(chat_id, {}).get("genre", "Unknown")

    user_choice_message = (f"üé¨ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤\n\n"
                           f"üé≠ –ñ–∞–Ω—Ä: <b>{genre}</b>,\n"
                           f"üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: <b>{year_range}</b>. üé•\n\n"
                           f"<code>–ï—Å–ª–∏ —Ñ–∏–ª—å–º—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ–¥—É –∏ –∂–∞–Ω—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ç–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ. "
                           f"–ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ–º—Å—è –∏ —Å–æ–∑–¥–∞–µ–º —Å–≤–æ—é –±–∞–∑—É, –Ω–µ –∑–∞–≤–∏—Å–∏–º—É—é –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.</code>")

    await bot.send_message(chat_id, user_choice_message)
    await bot.send_chat_action(chat_id, 'typing')  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç"
    for i in range(5):
        movie_info, poster_url = get_random_movie_by_genre_and_year(f"{genre},{year_range}")
        items_1[i] = [movie_info, poster_url]
    try:
        await bot.send_photo(chat_id, photo=items_1[0][1], caption=items_1[0][0], reply_markup=paginator_1(0))
    except aiogram.utils.exceptions.BadRequest:
        await bot.send_message(chat_id,
                               "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∏–ª—å–º–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Ñ–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def paginator_1(page: int = 0, total_pages: int = 5):
    buttons = [InlineKeyboardButton("‚¨Ö", callback_data=pag_cb_1.new(action="prev", page=page)),
               InlineKeyboardButton("‚û°", callback_data=pag_cb_1.new(action="next", page=page))]
    if page == 0:  # Remove the "prev" button if at the beginning
        buttons.pop(0)
    if page == total_pages - 1:  # Remove the "next" button if at the end
        buttons.pop()
    return InlineKeyboardMarkup().row(*buttons)


@dp.callback_query_handler(pag_cb_1.filter(action="prev"))
async def prev_page(query: types.CallbackQuery, callback_data: dict):
    page = int(callback_data["page"]) - 1 if int(callback_data["page"]) > 0 else 0
    try:
        await query.message.edit_media(InputMediaPhoto(media=items_1[page][1]))
        await query.message.edit_caption(caption=items_1[page][0], reply_markup=paginator_1(page))
    except IndexError:
        pass
    except KeyError:
        pass


@dp.callback_query_handler(pag_cb_1.filter(action="next"))
async def next_page(query: types.CallbackQuery, callback_data: dict):
    page = int(callback_data["page"]) + 1
    try:
        await query.message.edit_media(InputMediaPhoto(media=items_1[page][1]))
        await query.message.edit_caption(caption=items_1[page][0], reply_markup=paginator_1(page))
    except aiogram.utils.exceptions.BadRequest:
        # Handle the exception by getting a new random movie
        random_id_movies = get_random_id_movies()
        movie_info, poster_url = get_movie_info(random_id_movies)
        items_1[page] = [movie_info, poster_url]
        await query.message.edit_media(InputMediaPhoto(media=items_1[page][1]))
        await query.message.edit_caption(caption=items_1[page][0], reply_markup=paginator_1(page))
    except IndexError:
        pass
    except KeyError:
        pass


def register_random_10_movie_command_handler_genres_1():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.register_message_handler(random_movie_command_genres_1)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random
