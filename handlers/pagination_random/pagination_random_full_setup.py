from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.input_media import InputMediaPhoto
from aiogram.utils.callback_data import CallbackData
import aiogram.utils.exceptions
from loguru import logger

from database.database import get_random_movie_by_genre_year_rating_country
from keyboards.reply.categories_btn import five_films_complete_selection_keyboard
from system.dispatcher import dp, bot

# –°–æ–∑–¥–∞–µ–º CallbackData –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
pagination_full_user_selection_country_callback = CallbackData("country", "country")
# –°–æ–∑–¥–∞–µ–º CallbackData –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
pagination_genre_callback_full_setup = CallbackData("genre", "genre")
# –°–æ–∑–¥–∞–µ–º CallbackData –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞
pagination_year_callback_full_setup = CallbackData("year", "year")
# –°–æ–∑–¥–∞–µ–º CallbackData –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∏ÃÜ—Ç–∏–Ω–≥–∞
pagination_top_rating_callback_full_setup = CallbackData("top_rating", "top_rating")


def pagination_create_genre_random_movie_full_setup_keyboard():
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
    countries = ['–ö–æ—Ä–µ—è –Æ–∂–Ω–∞—è', '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞', '–ò—Å–ø–∞–Ω–∏—è', '–§—Ä–∞–Ω—Ü–∏—è', '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã', '–®–≤–µ–π—Ü–∞—Ä–∏—è', '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è', '–ë–µ–ª–∞—Ä—É—Å—å',
                 '–ì–µ—Ä–º–∞–Ω–∏—è', '–ò—Ç–∞–ª–∏—è', '–ö–∞–Ω–∞–¥–∞', '–Ø–ø–æ–Ω–∏—è', '–ë—Ä–∞–∑–∏–ª–∏—è', '–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è', '–ê–≤—Å—Ç—Ä–∏—è', '–ö–æ–ª—É–º–±–∏—è', '–ö–∏—Ç–∞–π',
                 '–î–∞–Ω–∏—è', '–ú–µ–∫—Å–∏–∫–∞', '–û–ê–≠', '–°–®–ê', '–®–≤–µ—Ü–∏—è', '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', '–Æ–ê–†', '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', '–†–æ—Å—Å–∏—è']
    country_buttons = [InlineKeyboardButton(text=country, callback_data=f"country:{country}") for country in countries]
    country_markup = InlineKeyboardMarkup(row_width=3)
    country_markup.add(*country_buttons)
    return country_markup


def pagination_create_genre_selection_keyboard_full_setup():
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
    genres = ["–∫–æ–º–µ–¥–∏—è", "–¥—Ä–∞–º–∞", "–±–æ–µ–≤–∏–∫", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "—É–∂–∞—Å—ã", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "—Ç—Ä–∏–ª–ª–µ—Ä", "—Ñ—ç–Ω—Ç–µ–∑–∏", "–¥–µ—Ç–µ–∫—Ç–∏–≤",
              "–∫—Ä–∏–º–∏–Ω–∞–ª", "–≤–µ—Å—Ç–µ—Ä–Ω", "–≤–æ–µ–Ω–Ω—ã–π", "–º–µ–ª–æ–¥—Ä–∞–º–∞", "–º—É–ª—å—Ç—Ñ–∏–ª—å–º", "–∫–æ—Ä–æ—Ç–∫–æ–º–µ—Ç—Ä–∞–∂–∫–∞", "–¥–µ—Ç—Å–∫–∏–π", "–±–∏–æ–≥—Ä–∞—Ñ–∏—è",
              "–∏—Å—Ç–æ—Ä–∏—è", "–∞–Ω–∏–º–µ", "—Å–µ–º–µ–π–Ω—ã–π"]
    genre_buttons = [InlineKeyboardButton(text=genre, callback_data=f"genre:{genre}") for genre in genres]
    genres_markup = InlineKeyboardMarkup(row_width=3)
    genres_markup.add(*genre_buttons)
    return genres_markup


def pagination_create_year_selection_keyboard_full_setup():
    """–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞"""
    year_ranges = ["1990-2000", "2001-2005", "2006-2010", "2011-2015", "2016-2020", "2021-2024"]

    year_buttons = [InlineKeyboardButton(text=year_range, callback_data=f"year:{year_range}") for year_range in
                    year_ranges]
    year_markup = InlineKeyboardMarkup(row_width=3)
    year_markup.add(*year_buttons)
    return year_markup


def pagination_top_create_rating_random_movie_by_rating_keyboard_full_setup():
    """–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    top_ratings = ['0-1', '1-2', '2-3', '3-4', '4-5', '5-6', '6-7', '7-8', '8-9', '9-10']

    top_rating_buttons = [InlineKeyboardButton(text=top_rating, callback_data=f"top_rating:{top_rating}") for top_rating
                          in top_ratings]
    top_rating_markup = InlineKeyboardMarkup(row_width=3)
    top_rating_markup.add(*top_rating_buttons)
    return top_rating_markup


class PaginationGenreSelectionState(StatesGroup):
    pagination_genre_selection = State()
    pagination_country_selection = State()
    pagination_year_selection = State()
    pagination_top_rating_selection = State()


@dp.message_handler(lambda message: message.text == "üé≤ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ–ª–Ω—ã–π –≤—ã–±–æ—Ä")
async def pagination_top_random_movie_command_full_setup(message: types.Message):
    chat_id = message.chat.id
    main_page_kb = five_films_complete_selection_keyboard()
    await bot.send_message(chat_id, "üé≤ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ–ª–Ω—ã–π –≤—ã–±–æ—Ä", reply_markup=main_page_kb)
    genres_markup_user = pagination_create_genre_selection_keyboard_full_setup()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞:", reply_markup=genres_markup_user)
    await PaginationGenreSelectionState.pagination_genre_selection.set()


@dp.callback_query_handler(pagination_genre_callback_full_setup.filter(),
                           state=PaginationGenreSelectionState.pagination_genre_selection)
async def pagination_full_user_selection_genre(query: CallbackQuery, state: FSMContext, callback_data: dict):
    await state.update_data(genre=callback_data["genre"])
    country_markup = pagination_create_genre_random_movie_full_setup_keyboard()
    await bot.send_message(query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞:", reply_markup=country_markup)
    await PaginationGenreSelectionState.pagination_country_selection.set()


@dp.callback_query_handler(pagination_full_user_selection_country_callback.filter(),
                           state=PaginationGenreSelectionState.pagination_country_selection)
async def pagination_full_user_selection_country(query: CallbackQuery, state: FSMContext, callback_data: dict):
    await state.update_data(country=callback_data["country"])
    year_markup = pagination_create_year_selection_keyboard_full_setup()
    await bot.send_message(query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç:", reply_markup=year_markup)
    await PaginationGenreSelectionState.pagination_year_selection.set()


@dp.callback_query_handler(pagination_year_callback_full_setup.filter(),
                           state=PaginationGenreSelectionState.pagination_year_selection)
async def pagination_full_user_selection_year(query: CallbackQuery, state: FSMContext, callback_data: dict):
    await state.update_data(year=callback_data["year"])
    top_rating_markup = pagination_top_create_rating_random_movie_by_rating_keyboard_full_setup()
    await bot.send_message(query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª—å–º–∞:", reply_markup=top_rating_markup)
    await PaginationGenreSelectionState.pagination_top_rating_selection.set()


@dp.callback_query_handler(pagination_top_rating_callback_full_setup.filter(),
                           state=PaginationGenreSelectionState.pagination_top_rating_selection)
async def pagination_full_user_selection_top_rating(query: CallbackQuery, state: FSMContext, callback_data: dict):
    data = await state.get_data()
    genre = data.get('genre', '')
    country = data.get('country', '')
    year_range = data.get('year', '')
    top_rating = callback_data["top_rating"]
    print(genre, country, year_range, top_rating)
    user_choice_message = (f"üé¨ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤\n\n"
                           f"üé≠ –ñ–∞–Ω—Ä: <b>{genre}</b>,\n"
                           f"üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: <b>{year_range}</b>. üé•\n"
                           f"–°—Ç—Ä–∞–Ω–∞: <b>{country}</b>,\n"
                           f"–†–µ–π—Ç–∏–Ω–≥: <b>{top_rating}</b>,\n"
                           f"<code>–ï—Å–ª–∏ —Ñ–∏–ª—å–º—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ–¥—É –∏ –∂–∞–Ω—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ç–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ. "
                           f"–ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ–º—Å—è –∏ —Å–æ–∑–¥–∞–µ–º —Å–≤–æ—é –±–∞–∑—É, –Ω–µ –∑–∞–≤–∏—Å–∏–º—É—é –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.</code>")

    chat_id = query.message.chat.id
    await bot.send_message(chat_id, user_choice_message)

    await bot.send_chat_action(chat_id, 'typing')  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç"
    try:
        for i in range(5):
            movie_info, poster_url = get_random_movie_by_genre_year_rating_country(
                f"{genre},{year_range},{country},{top_rating}")
            items_random_full_setup[i] = [movie_info, poster_url]
        try:
            await bot.send_photo(chat_id, photo=items_random_full_setup[0][1], caption=items_random_full_setup[0][0],
                                 reply_markup=pagination_random_full_setup(0))
        except aiogram.utils.exceptions.BadRequest:
            await bot.send_message(chat_id, "–§–∏–ª—å–º—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except TypeError:
        await bot.send_message(chat_id, "–§–∏–ª—å–º—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    await state.finish()


pag_cb_random_full_setup = CallbackData("empty", "action", "page")
items_random_full_setup = {}


def pagination_random_full_setup(page: int = 0, total_pages: int = 5):
    buttons = [InlineKeyboardButton("‚¨Ö", callback_data=pag_cb_random_full_setup.new(action="prev", page=page)),
               InlineKeyboardButton("‚û°", callback_data=pag_cb_random_full_setup.new(action="next", page=page))]
    if page == 0:  # Remove the "prev" button if at the beginning
        buttons.pop(0)
    if page == total_pages - 1:  # Remove the "next" button if at the end
        buttons.pop()
    return InlineKeyboardMarkup().row(*buttons)


@dp.callback_query_handler(pag_cb_random_full_setup.filter(action="prev"))
async def prev_page(query: types.CallbackQuery, callback_data: dict):
    page = int(callback_data["page"]) - 1 if int(callback_data["page"]) > 0 else 0
    await query.message.edit_media(InputMediaPhoto(media=items_random_full_setup[page][1]))
    await query.message.edit_caption(caption=items_random_full_setup[page][0],
                                     reply_markup=pagination_random_full_setup(page))


@dp.callback_query_handler(pag_cb_random_full_setup.filter(action="next"))
async def next_page(query: types.CallbackQuery, callback_data: dict):
    page = int(callback_data["page"]) + 1
    try:
        await query.message.edit_media(InputMediaPhoto(media=items_random_full_setup[page][1]))
        await query.message.edit_caption(caption=items_random_full_setup[page][0],
                                         reply_markup=pagination_random_full_setup(page))
    except KeyError as error:
        logger.exception(error)


def register_random_5_movie_command_handler_full_setup():
    dp.register_message_handler(pagination_top_random_movie_command_full_setup)
    dp.register_callback_query_handler(pagination_full_user_selection_genre,
                                       pagination_genre_callback_full_setup.filter())
    dp.register_callback_query_handler(pagination_full_user_selection_country,
                                       pagination_full_user_selection_country_callback.filter())
    dp.register_callback_query_handler(pagination_full_user_selection_year,
                                       pagination_year_callback_full_setup.filter())
    dp.register_callback_query_handler(pagination_full_user_selection_top_rating,
                                       pagination_top_rating_callback_full_setup.filter())
