import aiogram.utils.exceptions
from aiogram import types
from aiogram.types import CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.input_media import InputMediaPhoto
from aiogram.utils.callback_data import CallbackData

from database.database import get_random_movie_by_country
from keyboards.reply.categories_btn import create_pagination_country_keyboard
from system.dispatcher import dp, bot

user_selections_country = {}  # Create a dictionary to store user selections
pag_cb_country = CallbackData("empty", "action", "page")
top_country_callback = CallbackData("top_country_random", "top_country_random")
country_items = {}


def create_genre_random_movie_by_top_country_keyboard():
    """–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞"""
    top_countries = ['–ö–æ—Ä–µ—è –Æ–∂–Ω–∞—è', '–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞', '–ò—Å–ø–∞–Ω–∏—è', '–§—Ä–∞–Ω—Ü–∏—è', '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã', '–®–≤–µ–π—Ü–∞—Ä–∏—è', '–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è',
                     '–ë–µ–ª–∞—Ä—É—Å—å', '–ì–µ—Ä–º–∞–Ω–∏—è', '–ò—Ç–∞–ª–∏—è', '–ö–∞–Ω–∞–¥–∞', '–Ø–ø–æ–Ω–∏—è', '–ë—Ä–∞–∑–∏–ª–∏—è', '–ù–æ–≤–∞—è –ó–µ–ª–∞–Ω–¥–∏—è', '–ê–≤—Å—Ç—Ä–∏—è',
                     '–ö–æ–ª—É–º–±–∏—è', '–ö–∏—Ç–∞–π', '–î–∞–Ω–∏—è', '–ú–µ–∫—Å–∏–∫–∞', '–û–ê–≠', '–°–®–ê', '–®–≤–µ—Ü–∏—è', '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', '–Æ–ê–†',
                     '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', '–†–æ—Å—Å–∏—è']

    top_country_buttons = [InlineKeyboardButton(text=top_country, callback_data=f"top_country_random:{top_country}") for
                           top_country in
                           top_countries]
    country_markup = InlineKeyboardMarkup(row_width=3)
    country_markup.add(*top_country_buttons)
    return country_markup


@dp.message_handler(lambda message: message.text == "üé≤ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–µ")
async def random_movie_command_country(message: types.Message):
    chat_id = message.chat.id
    main_page_kb = create_pagination_country_keyboard()
    await bot.send_message(chat_id, "üé≤ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è", reply_markup=main_page_kb)
    country_markup = create_genre_random_movie_by_top_country_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞ —Ñ–∏–ª—å–º–∞
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è —Ñ–∏–ª—å–º–∞:", reply_markup=country_markup)


@dp.callback_query_handler(top_country_callback.filter())
async def country_process_year_callback_1(query: CallbackQuery):
    chat_id = query.message.chat.id
    top_country = query.data.split(":")[1]
    user_selections_country[chat_id] = {"top_country_random": top_country}
    print(top_country)

    user_choice_message = (f"üé¨ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤\n\n"
                           f"üé≠ –°—Ç—Ä–∞–Ω–∞: <b>{top_country}</b>,\n\n"
                           f"<code>–ï—Å–ª–∏ —Ñ–∏–ª—å–º—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ç–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ. "
                           f"–ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ–º—Å—è –∏ —Å–æ–∑–¥–∞–µ–º —Å–≤–æ—é –±–∞–∑—É, –Ω–µ –∑–∞–≤–∏—Å–∏–º—É—é –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.</code>")

    await bot.send_message(chat_id, user_choice_message)
    await bot.send_chat_action(chat_id, 'typing')  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç"
    for i in range(5):
        movie_info, poster_url = get_random_movie_by_country(top_country)
        country_items[i] = [movie_info, poster_url]
    try:
        await bot.send_photo(chat_id, photo=country_items[0][1], caption=country_items[0][0],
                             reply_markup=top_paginator_country(0))
    except aiogram.utils.exceptions.BadRequest:
        await bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∏–ª—å–º–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Ñ–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


def top_paginator_country(page: int = 0, total_pages: int = 5):
    buttons = [InlineKeyboardButton("‚¨Ö", callback_data=pag_cb_country.new(action="prev_country", page=page)),
               InlineKeyboardButton("‚û°", callback_data=pag_cb_country.new(action="next_country", page=page))]
    if page == 0:  # Remove the "prev" button if at the beginning
        buttons.pop(0)
    if page == total_pages - 1:  # Remove the "next" button if at the end
        buttons.pop()
    return InlineKeyboardMarkup().row(*buttons)


@dp.callback_query_handler(pag_cb_country.filter(action="prev_country"))
async def prev_page(query: types.CallbackQuery, callback_data: dict):
    page = int(callback_data["page"]) - 1 if int(callback_data["page"]) > 0 else 0
    await query.message.edit_media(InputMediaPhoto(media=country_items[page][1]))
    await query.message.edit_caption(caption=country_items[page][0], reply_markup=top_paginator_country(page))


@dp.callback_query_handler(pag_cb_country.filter(action="next_country"))
async def next_page(query: types.CallbackQuery, callback_data: dict):
    page = int(callback_data["page"]) + 1
    await query.message.edit_media(InputMediaPhoto(media=country_items[page][1]))
    await query.message.edit_caption(caption=country_items[page][0], reply_markup=top_paginator_country(page))


def register_random_movie_country():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.register_message_handler(random_movie_command_country)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random
