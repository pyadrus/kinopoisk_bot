import aiogram.utils.exceptions
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.input_media import InputMediaPhoto
from aiogram.utils.callback_data import CallbackData
from loguru import logger

from database.database import get_random_movie_by_genre_and_year
from keyboards.inline.adv_search_again import create_genre_selection_keyboard
from keyboards.reply.categories_btn import create_pagination_random_genre_keyboard
from system.dispatcher import dp, bot

logger.add("logs/log.log", retention="1 days", enqueue=True)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞

year_callback = CallbackData("year", "year")
genre_callback = CallbackData("genre", "genre")


class PaginationRandomGenre(StatesGroup):  # –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    paginator_random_genre_state = State()  # –ñ–∞–Ω—Ä
    paginator_year_state = State()  # –ì–æ–¥


@dp.message_handler(lambda message: message.text == "üé≤ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä–∞–º")
async def random_movie_command_genres_1(message: types.Message, state: FSMContext):
    chat_id = message.chat.id
    # await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    # await state.reset_state()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π, –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    main_page_kb = create_pagination_random_genre_keyboard()
    await bot.send_message(chat_id, "üé≤ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä–∞–º", reply_markup=main_page_kb)
    genres_markup = create_genre_selection_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞ —Ñ–∏–ª—å–º–∞
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞:", reply_markup=genres_markup)
    await PaginationRandomGenre.paginator_random_genre_state.set()


def create_year_selection_genre_keyboard():
    """–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞"""
    year_ranges = ["1990-2000", "2001-2005", "2006-2010", "2011-2015", "2016-2020", "2021-2024"]
    year_buttons = [InlineKeyboardButton(text=year_range, callback_data=f"year:{year_range}") for year_range in
                    year_ranges]
    year_markup = InlineKeyboardMarkup(row_width=3)
    year_markup.add(*year_buttons)
    return year_markup


@dp.callback_query_handler(genre_callback.filter(), state=PaginationRandomGenre.paginator_random_genre_state)
async def process_genre_callback_genres(query: CallbackQuery, state: FSMContext, callback_data: dict):
    chat_id = query.message.chat.id
    genre = callback_data["genre"]
    logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –∂–∞–Ω—Ä: {genre}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chat_id}")
    await state.update_data(genre=callback_data["genre"])
    year_markup = create_year_selection_genre_keyboard()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ª–µ—Ç
    await bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç:", reply_markup=year_markup)
    await PaginationRandomGenre.paginator_year_state.set()


@dp.callback_query_handler(year_callback.filter(), state=PaginationRandomGenre.paginator_year_state)
async def process_year_callback_1(query: CallbackQuery, state: FSMContext, callback_data: dict):
    chat_id = query.message.chat.id
    data = await state.get_data()
    genre = data.get("genre", "")
    year_range = callback_data["year"]
    logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–¥: {year_range}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chat_id}")

    user_choice_message = (f"üé¨ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤\n\n"
                           f"üé≠ –ñ–∞–Ω—Ä: <b>{genre}</b>,\n"
                           f"üìÖ –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: <b>{year_range}</b>. üé•\n\n"
                           f"<code>–ï—Å–ª–∏ —Ñ–∏–ª—å–º—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≥–æ–¥—É –∏ –∂–∞–Ω—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ç–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ. "
                           f"–ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞—Å—à–∏—Ä—è–µ–º—Å—è –∏ —Å–æ–∑–¥–∞–µ–º —Å–≤–æ—é –±–∞–∑—É, –Ω–µ –∑–∞–≤–∏—Å–∏–º—É—é –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.</code>")

    await bot.send_message(chat_id, user_choice_message)
    await bot.send_chat_action(chat_id, 'typing')  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç"
    for i in range(5):
        movie_info, poster_url = get_random_movie_by_genre_and_year(f"{genre},{year_range}")
        items_paginator_random_genre[i] = [movie_info, poster_url]
    logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã: {items_paginator_random_genre}")
    try:
        await bot.send_photo(chat_id, photo=items_paginator_random_genre[0][1], caption=items_paginator_random_genre[0][0],
                             reply_markup=paginator_random_genre(0))
    except aiogram.utils.exceptions.BadRequest:
        await bot.send_message(chat_id,
                               "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–∏–ª—å–º–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Ñ–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    await state.finish()

items_paginator_random_genre = {}
pag_cb_1 = CallbackData("empty", "action", "page")


def paginator_random_genre(page: int = 0, total_pages: int = 5):
    buttons = [InlineKeyboardButton("‚¨Ö", callback_data=pag_cb_1.new(action="prevs", page=page)),
               InlineKeyboardButton("‚û°", callback_data=pag_cb_1.new(action="nexts", page=page))]
    if page == 0:  # Remove the "prev" button if at the beginning
        buttons.pop(0)
    if page == total_pages - 1:  # Remove the "next" button if at the end
        buttons.pop()
    return InlineKeyboardMarkup().row(*buttons)


@dp.callback_query_handler(pag_cb_1.filter(action="prevs"))
async def prev_page_pagination_random_genre(query: types.CallbackQuery, callback_data: dict):
    page = int(callback_data["page"]) - 1 if int(callback_data["page"]) > 0 else 0
    logger.info(f"–°–ª–µ–¥—É—é—â–∏–π —Ñ–∏–ª—å–º –∏–∑ 5 —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∂–∞–Ω—Ä—É: {page}")
    await query.message.edit_media(InputMediaPhoto(media=items_paginator_random_genre[page][1]))
    await query.message.edit_caption(caption=items_paginator_random_genre[page][0], reply_markup=paginator_random_genre(page))


@dp.callback_query_handler(pag_cb_1.filter(action="nexts"))
async def next_page_pagination_random_genre(query: types.CallbackQuery, callback_data: dict):
    page = int(callback_data["page"]) + 1
    if 0 <= page < len(items_paginator_random_genre):
        try:
            await query.message.edit_media(InputMediaPhoto(media=items_paginator_random_genre[page][1]))
            await query.message.edit_caption(caption=items_paginator_random_genre[page][0], reply_markup=paginator_random_genre(page))
        except Exception as error:
            logger.exception(error)
    else:
        # Handle the case where the page is out of bounds (e.g., reached the end of the list).
        # You can send a message indicating that there are no more movies.
        await query.message.answer("No more movies available.")


def register_random_10_movie_command_handler_genres_1():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers –¥–ª—è –±–æ—Ç–∞"""
    dp.register_message_handler(random_movie_command_genres_1)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random
    dp.register_callback_query_handler(process_year_callback_1, year_callback.filter())
    dp.register_callback_query_handler(process_genre_callback_genres, genre_callback.filter())
